---
# Task file for postgres database installation in Debian distribution

- debug:
    msg: "psql_version is {{psql_version}}"

- name: Add PostgreSQL Global Development Group (PGDG) repository key
  apt_key:
    id: ACCC4CF8
    state: present
    data: |
      -----BEGIN PGP PUBLIC KEY BLOCK-----

      mQINBE6XR8IBEACVdDKT2HEH1IyHzXkb4nIWAY7echjRxo7MTcj4vbXAyBKOfjja
      UrBEJWHN6fjKJXOYWXHLIYg0hOGeW9qcSiaa1/rYIbOzjfGfhE4x0Y+NJHS1db0V
      G6GUj3qXaeyqIJGS2z7m0Thy4Lgr/LpZlZ78Nf1fliSzBlMo1sV7PpP/7zUO+aA4
      bKa8Rio3weMXQOZgclzgeSdqtwKnyKTQdXY5MkH1QXyFIk1nTfWwyqpJjHlgtwMi
      c2cxjqG5nnV9rIYlTTjYG6RBglq0SmzF/raBnF4Lwjxq4qRqvRllBXdFu5+2pMfC
      IZ10HPRdqDCTN60DUix+BTzBUT30NzaLhZbOMT5RvQtvTVgWpeIn20i2NrPWNCUh
      hj490dKDLpK/v+A5/i8zPvN4c6MkDHi1FZfaoz3863dylUBR3Ip26oM0hHXf4/2U
      A/oA4pCl2W0hc4aNtozjKHkVjRx5Q8/hVYu+39csFWxo6YSB/KgIEw+0W8DiTII3
      RQj/OlD68ZDmGLyQPiJvaEtY9fDrcSpI0Esm0i4sjkNbuuh0Cvwwwqo5EF1zfkVj
      Tqz2REYQGMJGc5LUbIpk5sMHo1HWV038TWxlDRwtOdzw08zQA6BeWe9FOokRPeR2
      AqhyaJJwOZJodKZ76S+LDwFkTLzEKnYPCzkoRwLrEdNt1M7wQBThnC5z6wARAQAB
      tBxQb3N0Z3JlU1FMIERlYmlhbiBSZXBvc2l0b3J5iQJOBBMBCAA4AhsDBQsJCAcD
      BRUKCQgLBRYCAwEAAh4BAheAFiEEuXsK/KoaR/BE8kSgf8x9RqzMTPgFAlhtCD8A
      CgkQf8x9RqzMTPgECxAAk8uL+dwveTv6eH21tIHcltt8U3Ofajdo+D/ayO53LiYO
      xi27kdHD0zvFMUWXLGxQtWyeqqDRvDagfWglHucIcaLxoxNwL8+e+9hVFIEskQAY
      kVToBCKMXTQDLarz8/J030Pmcv3ihbwB+jhnykMuyyNmht4kq0CNgnlcMCdVz0d3
      z/09puryIHJrD+A8y3TD4RM74snQuwc9u5bsckvRtRJKbP3GX5JaFZAqUyZNRJRJ
      Tn2OQRBhCpxhlZ2afkAPFIq2aVnEt/Ie6tmeRCzsW3lOxEH2K7MQSfSu/kRz7ELf
      Cz3NJHj7rMzC+76Rhsas60t9CjmvMuGONEpctijDWONLCuch3Pdj6XpC+MVxpgBy
      2VUdkunb48YhXNW0jgFGM/BFRj+dMQOUbY8PjJjsmVV0joDruWATQG/M4C7O8iU0
      B7o6yVv4m8LDEN9CiR6r7H17m4xZseT3f+0QpMe7iQjz6XxTUFRQxXqzmNnloA1T
      7VjwPqIIzkj/u0V8nICG/ktLzp1OsCFatWXh7LbU+hwYl6gsFH/mFDqVxJ3+DKQi
      vyf1NatzEwl62foVjGUSpvh3ymtmtUQ4JUkNDsXiRBWczaiGSuzD9Qi0ONdkAX3b
      ewqmN4TfE+XIpCPxxHXwGq9Rv1IFjOdCX0iG436GHyTLC1tTUIKF5xV4Y0+cXIOI
      RgQQEQgABgUCTpdI7gAKCRDFr3dKWFELWqaPAKD1TtT5c3sZz92Fj97KYmqbNQZP
      +ACfSC6+hfvlj4GxmUjp1aepoVTo3weJAhwEEAEIAAYFAk6XSQsACgkQTFprqxLS
      p64F8Q//cCcutwrH50UoRFejg0EIZav6LUKejC6kpLeubbEtuaIH3r2zMblPGc4i
      +eMQKo/PqyQrceRXeNNlqO6/exHozYi2meudxa6IudhwJIOn1MQykJbNMSC2sGUp
      1W5M1N5EYgt4hy+qhlfnD66LR4G+9t5FscTJSy84SdiOuqgCOpQmPkVRm1HX5X1+
      dmnzMOCk5LHHQuiacV0qeGO7JcBCVEIDr+uhU1H2u5GPFNHm5u15n25tOxVivb94
      xg6NDjouECBH7cCVuW79YcExH/0X3/9G45rjdHlKPH1OIUJiiX47OTxdG3dAbB4Q
      fnViRJhjehFscFvYWSqXo3pgWqUsEvv9qJac2ZEMSz9x2mj0ekWxuM6/hGWxJdB+
      +985rIelPmc7VRAXOjIxWknrXnPCZAMlPlDLu6+vZ5BhFX0Be3y38f7GNCxFkJzl
      hWZ4Cj3WojMj+0DaC1eKTj3rJ7OJlt9S9xnO7OOPEUTGyzgNIDAyCiu8F4huLPaT
      ape6RupxOMHZeoCVlqx3ouWctelB2oNXcxxiQ/8y+21aHfD4n/CiIFwDvIQjl7dg
      mT3u5Lr6yxuosR3QJx1P6rP5ZrDTP9khT30t+HZCbvs5Pq+v/9m6XDmi+NlU7Zuh
      Ehy97tL3uBDgoL4b/5BpFL5U9nruPlQzGq1P9jj40dxAaDAX/WKJAj0EEwEIACcC
      GwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlB5KywFCQPDFt8ACgkQf8x9RqzM
      TPhuCQ//QAjRSAOCQ02qmUAikT+mTB6baOAakkYq6uHbEO7qPZkv4E/M+HPIJ4wd
      nBNeSQjfvdNcZBA/x0hr5EMcBneKKPDj4hJ0panOIRQmNSTThQw9OU351gm3YQct
      AMPRUu1fTJAL/AuZUQf9ESmhyVtWNlH/56HBfYjE4iVeaRkkNLJyX3vkWdJSMwC/
      LO3Lw/0M3R8itDsm74F8w4xOdSQ52nSRFRh7PunFtREl+QzQ3EA/WB4AIj3VohIG
      kWDfPFCzV3cyZQiEnjAe9gG5pHsXHUWQsDFZ12t784JgkGyO5wT26pzTiuApWM3k
      /9V+o3HJSgH5hn7wuTi3TelEFwP1fNzI5iUUtZdtxbFOfWMnZAypEhaLmXNkg4zD
      kH44r0ss9fR0DAgUav1a25UnbOn4PgIEQy2fgHKHwRpCy20d6oCSlmgyWsR40EPP
      YvtGq49A2aK6ibXmdvvFT+Ts8Z+q2SkFpoYFX20mR2nsF0fbt1lfH65P64dukxeR
      GteWIeNakDD40bAAOH8+OaoTGVBJ2ACJfLVNM53PEoftavAwUYMrR910qvwYfd/4
      6rh46g1Frr9SFMKYE9uvIJIgDsQB3QBp71houU4H55M5GD8XURYs+bfiQpJG1p7e
      B8e5jZx1SagNWc4XwL2FzQ9svrkbg1Y+359buUiP7T6QXX2zY++JAj0EEwEIACcC
      GwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlEqbZUFCQg2wEEACgkQf8x9RqzM
      TPhFMQ//WxAfKMdpSIA9oIC/yPD/dJpY/+DyouOljpE6MucMy/ArBECjFTBwi/j9
      NYM4ynAk34IkhuNexc1i9/05f5RM6+riLCLgAOsADDbHD4miZzoSxiVr6GQ3YXMb
      OGld9kV9Sy6mGNjcUov7iFcf5Hy5w3AjPfKuR9zXswyfzIU1YXObiiZT38l55pp/
      BSgvGVQsvbNjsff5CbEKXS7q3xW+WzN0QWF6YsfNVhFjRGj8hKtHvwKcA02wwjLe
      LXVTm6915ZUKhZXUFc0vM4Pj4EgNswH8Ojw9AJaKWJIZmLyW+aP+wpu6YwVCicxB
      Y59CzBO2pPJDfKFQzUtrErk9irXeuCCLesDyirxJhv8o0JAvmnMAKOLhNFUrSQ2m
      +3EnF7zhfz70gHW+EG8X8mL/EN3/dUM09j6TVrjtw43RLxBzwMDeariFF9yC+5bL
      tnGgxjsB9Ik6GV5v34/NEEGf1qBiAzFmDVFRZlrNDkq6gmpvGnA5hUWNr+y0i01L
      jGyaLSWHYjgw2UEQOqcUtTFK9MNzbZze4mVaHMEz9/aMfX25R6qbiNqCChveIm8m
      Yr5Ds2zdZx+G5bAKdzX7nx2IUAxFQJEE94VLSp3npAaTWv3sHr7dR8tSyUJ9poDw
      gw4W9BIcnAM7zvFYbLF5FNggg/26njHCCN70sHt8zGxKQINMc6SJAj0EEwEIACcC
      GwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlLpFRkFCQ6EJy0ACgkQf8x9RqzM
      TPjOZA//Zp0e25pcvle7cLc0YuFr9pBv2JIkLzPm83nkcwKmxaWayUIG4Sv6pH6h
      m8+S/CHQij/yFCX+o3ngMw2J9HBUvafZ4bnbI0RGJ70GsAwraQ0VlkIfg7GUw3Tz
      voGYO42rZTru9S0K/6nFP6D1HUu+U+AsJONLeb6oypQgInfXQExPZyliUnHdipei
      4WR1YFW6sjSkZT/5C3J1wkAvPl5lvOVthI9Zs6bZlJLZwusKxU0UM4Btgu1Sf3nn
      JcHmzisixwS9PMHE+AgPWIGSec/N27a0KmTTvImV6K6nEjXJey0K2+EYJuIBsYUN
      orOGBwDFIhfRk9qGlpgt0KRyguV+AP5qvgry95IrYtrOuE7307SidEbSnvO5ezNe
      mE7gT9Z1tM7IMPfmoKph4BfpNoH7aXiQh1Wo+ChdP92hZUtQrY2Nm13cmkxYjQ4Z
      gMWfYMC+DA/GooSgZM5i6hYqyyfAuUD9kwRN6BqTbuAUAp+hCWYeN4D88sLYpFh3
      paDYNKJ+Gf7Yyi6gThcV956RUFDH3ys5Dk0vDL9NiWwdebWfRFbzoRM3dyGP889a
      OyLzS3mh6nHzZrNGhW73kslSQek8tjKrB+56hXOnb4HaElTZGDvD5wmrrhN94kby
      Gtz3cydIohvNO9d90+29h0eGEDYti7j7maHkBKUAwlcPvMg5m3Y=
      =DA1T
      -----END PGP PUBLIC KEY BLOCK-----

- name: Add PGDG repository
  apt_repository:
    repo: "{{item}}"
    filename: 'pgdg'
    state: present
  with_items:
    - "deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_distribution_release}}-pgdg main"

- name: "Install postgresql {{psql_version}} packages"
  apt:
    name: "{{postgre_packages[ansible_distribution+'_'+ansible_distribution_major_version]}}"
    state: latest
    update_cache: yes

- name: Hold packages from upgrading
  dpkg_selections:
    name: "{{item}}"
    selection: hold
  with_items: "{{postgre_packages[ansible_distribution+'_'+ansible_distribution_major_version]}}"

- name: Install python-psycopg2 package
  become: true
  package:
    name: "{{ python_psycopg2_package[ansible_os_family] }}"
    state: latest

- name: Change password of postgres super-user
  become: yes
  become_user: postgres
  postgresql_user:
    name: postgres
    password: "{{ password_postgre }}"
    state: present
  register: postgres_password

- name: "Add rows to pg_hba.conf"
  become: yes
  become_user: postgres
  blockinfile:
    dest: "/etc/postgresql/{{psql_version}}/main/pg_hba.conf"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: '# Database administrative login by Unix domain socket'
    block: |
        local   {{ db_name }} {{ db_user }} ident
        host    {{ db_name }} {{ db_user }} 127.0.0.1/32 md5
        hostssl all   all   all          md5
  register: pg_hba

- name: Set listen_addresses=* in postgresql.conf
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: "^#listen_addresses = 'localhost'(.*)$"
    line: "listen_addresses = '*'\\1"
    backrefs: yes
  register: listen_addresses

- name: Set TLS cert
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_cert_file'
    line: "ssl_cert_file = '{{postgres_certificate_file}}'"
    backrefs: yes
  register: ssl_cert_file

- name: Set TLS key
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_key_file'
    line: "ssl_key_file = '{{postgres_certificate_key_file}}'"
    backrefs: yes
  register: ssl_key_file

- name: Set TLS CA chain
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_ca_file'
    line: "ssl_ca_file = '{{postgres_certificate_chain_file}}'"
    backrefs: yes
  register: ssl_ca_file

- name: Set max_connections = 150
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: '^max_connections = 100(.*)$'
    line: 'max_connections = 150\1'
    backrefs: yes
  register: max_conns

- name: Restart PostgreSQL
  become: true
  when: pg_hba.changed or postgres_password.changed or max_conns.changed or listen_addresses.changed or ssl_cert_file.changed or ssl_key_file.changed or ssl_ca_file.changed
  service:
    state: restarted
    name: postgresql

- name: Create user "{{ db_user }}" without superuser and createdb privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ password_db }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present

- name: Create database "{{ db_name }}" owned by user "{{ db_user }}"
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    encoding: 'UTF-8'
    owner: "{{ db_user }}"
    state: present

- name: Create schema "{{ db_user }}" in database "{{ db_name }}"
  become: yes
  become_user: postgres
  postgresql_schema:
    database: "{{ db_name }}"
    name: "{{ db_user }}"
    owner: "{{ db_user }}"

- name: Add unaccent extension
  become: yes
  become_user: postgres
  postgresql_ext:
    db: "{{ db_name }}"
    name: unaccent

- name: Detect whether table users exists and contains rows
  become: yes
  become_user: "{{ db_user }}"
  changed_when: False
  failed_when: False
  command: psql -d "{{ db_name }}" --tuples-only -P format=unaligned -c "select count(*) from users;"
  register: table_users

- name: Create tables
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -f "{{ postgres_conf_file_path }}"
  when: table_users.rc == 1

- name: Create initial users in database
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -c "insert into perun.ext_sources (id,name,type) values (nextval('ext_sources_id_seq'),'INTERNAL','cz.metacentrum.perun.core.impl.ExtSourceInternal');insert into perun.users (id, first_name, last_name) values (nextval('users_id_seq'),'{{ init_user_first_name }}','{{ init_user_last_name }}');insert into perun.user_ext_sources (id, user_id, login_ext, ext_sources_id, loa) values (nextval('user_ext_sources_id_seq'), currval('users_id_seq'), 'perun', currval('ext_sources_id_seq'), 0);insert into perun.auditer_consumers (id, name, last_processed_id) values (nextval('auditer_consumers_id_seq'), 'ldapcConsumer', 0);";
  when: table_users.rc == 1 or (table_users.rc == 0 and table_users.stdout == '0')

- name: Create cron job for dumping data to a file usable for filesystem backup
  copy:
    dest: "/etc/cron.d/postgresql-backup"
    content: |
      # Everyday do the backup of the PostgreSQL DB
      50 22 * * * postgres /usr/bin/pg_dumpall -f /var/lib/postgresql/backup.sql
