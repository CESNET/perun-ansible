---
# Task file for postgres database installation in Debian distribution

- debug:
    msg: "psql_version is {{psql_version}}"

- name: "Install postgresql {{psql_version}} packages"
  become: true
  package:
    name: "{{item}}"
    state: present
  with_items: "{{postgre_packages[ansible_distribution+'_'+ansible_distribution_major_version]}}"

- name: Hold packages from upgrading
  dpkg_selections:
    name: "{{item}}"
    selection: hold
  with_items: "{{postgre_packages[ansible_distribution+'_'+ansible_distribution_major_version]}}"

- name: Install python-psycopg2 package
  become: true
  package:
    name: "{{ python_psycopg2_package[ansible_os_family] }}"
    state: latest

- name: Change password of postgres super-user
  become: yes
  become_user: postgres
  postgresql_user:
    name: postgres
    password: "{{ password_postgre }}"
    state: present
  register: postgres_password

- name: "Add rows to pg_hba.conf"
  become: yes
  become_user: postgres
  blockinfile:
    dest: "/etc/postgresql/{{psql_version}}/main/pg_hba.conf"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: '# Database administrative login by Unix domain socket'
    block: |
        local   {{ db_name }} {{ db_user }} ident
        host    {{ db_name }} {{ db_user }} 127.0.0.1/32 md5
        hostssl all   all   all          md5
  register: pg_hba

- name: Set listen_addresses=* in postgresql.conf
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: "^#listen_addresses = 'localhost'(.*)$"
    line: "listen_addresses = '*'\\1"
    backrefs: yes
  register: listen_addresses

- name: Set TLS cert
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_cert_file'
    line: "ssl_cert_file = '{{apache_certificate_file}}'"
    backrefs: yes
  register: ssl_cert_file

- name: Set TLS key
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_key_file'
    line: "ssl_key_file = '{{apache_certificate_key_file}}'"
    backrefs: yes
  register: ssl_key_file

- name: Set TLS CA chain
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: 'ssl_ca_file'
    line: "ssl_ca_file = '{{apache_certificate_chain_file}}'"
    backrefs: yes
  register: ssl_ca_file

- name: Set max_connections = 150
  lineinfile:
    path: "/etc/postgresql/{{psql_version}}/main/postgresql.conf"
    regexp: '^max_connections = 100(.*)$'
    line: 'max_connections = 150\1'
    backrefs: yes
  register: max_conns

- name: Restart PostgreSQL
  become: true
  when: pg_hba.changed or postgres_password.changed or max_conns.changed or listen_addresses.changed or ssl_cert_file.changed or ssl_key_file.changed or ssl_ca_file.changed
  service:
    state: restarted
    name: postgresql

- name: Create user "{{ db_user }}" without superuser and createdb privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ password_db }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present

- name: Create database "{{ db_name }}" owned by user "{{ db_user }}"
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    encoding: 'UTF-8'
    owner: "{{ db_user }}"
    state: present

- name: Create schema "{{ db_user }}" in database "{{ db_name }}"
  become: yes
  become_user: postgres
  postgresql_schema:
    database: "{{ db_name }}"
    name: "{{ db_user }}"
    owner: "{{ db_user }}"

- name: Add unaccent extension
  become: yes
  become_user: postgres
  postgresql_ext:
    db: "{{ db_name }}"
    name: unaccent

- name: Detect whether table users exists and contains rows
  become: yes
  become_user: "{{ db_user }}"
  changed_when: False
  failed_when: False
  command: psql -d "{{ db_name }}" --tuples-only -P format=unaligned -c "select count(*) from users;"
  register: table_users

- name: Create tables
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -f "{{ postgres_conf_file_path }}"
  when: table_users.rc == 1

- name: Create initial users in database
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -c "insert into perun.ext_sources (id,name,type) values (nextval('ext_sources_id_seq'),'INTERNAL','cz.metacentrum.perun.core.impl.ExtSourceInternal');insert into perun.users (id, first_name, last_name) values (nextval('users_id_seq'),'{{ init_user_first_name }}','{{ init_user_last_name }}');insert into perun.user_ext_sources (id, user_id, login_ext, ext_sources_id, loa) values (nextval('user_ext_sources_id_seq'), currval('users_id_seq'), 'perun', currval('ext_sources_id_seq'), 0);insert into perun.auditer_consumers (id, name, last_processed_id) values (nextval('auditer_consumers_id_seq'), 'ldapcConsumer', 0);";
  when: table_users.rc == 1 or (table_users.rc == 0 and table_users.stdout == '0')

- name: Create cron job for dumping data to a file usable for filesystem backup
  copy:
    dest: "/etc/cron.d/postgresql-backup"
    content: |
      # Everyday do the backup of the PostgreSQL DB
      50 22 * * * postgres /usr/bin/pg_dumpall -f /var/lib/postgresql/backup.sql
