# Perun administrators
perun.admins = perun, perunTests, perunDispatcher, perunController, perunEngine, perunRegistrar, perunCabinet, perunLdapc, perunLdapInitializer

# Principals for the Engines
perun.engine.principals = perunEngine, perun-engine

# Principals for the Registrar
perun.registrar.principals =

# Principals for the Notificator
perun.notification.principals = perunNotifications

# Principal for the RPC
perun.rpc.principal = perunRpc

# Do not lookup users for these logins
perun.dont.lookup.users=perunTests, perunDispatcher, perunController, perunEngine, perunRegistrar, perunCabinet, perunLdapc, perun-engine, perunNotifications, perunRpc, perunSynchronizer, perunLdapInitializer

# DB type (oracle/postgresql)
perun.db.type = postgresql

# Default group synchronization interval in fold of 5 minutes
perun.group.synchronization.interval = 1

# Timeout for group synchronization in minutes
perun.group.synchronization.timeout = 10

# Users who can do delegation
perun.rpc.powerusers = perun

# Perun DB Name
perun.perun.db.name = perun

# Perun RT URL
perun.rt.url =
perun.rt.defaultQueue=

# Perun service user for RT tickets
perun.rt.serviceuser.username =

# Perun service user for RT tickets
perun.rt.serviceuser.password =

# all RT tickets will be sent to this address as mails (we won't call RT API)
perun.rt.sendToMail =

# Program which ensures password changes
perun.passwordManager.program = /bin/true

# Program which ensures alternative password creation
perun.alternativePasswordManager.program =

# Peruns reCaptcha private key
perun.recaptcha.privatekey = 6Lf0eUYUAAAAAIBxpRrA7UNrT7czQ28IoH9yiDBE

# Perun properties for email validation message
perun.mailchange.secretKey = {{ key_mailchange }}
perun.mailchange.backupFrom = {{ perun_email }}
perun.mailchange.validationWindow = 24

perun.native.language = cs,ÄŒesky,Czech
#perun.native.language = it,Italiano,Italian
#perun.native.language =

# Perun properties for non-authz password reset (min. ASCII 16 chars/bytes for AES 128
perun.pwdreset.secretKey = {{ pwdreset_secret_key }}
# Use only hexa characters (0-F) , min. 16 chars/bytes for AES 128
perun.pwdreset.initVector = {{ pwdreset_init_vector }}
# Password reset validity window (in hours)
perun.pwdreset.validationWindow = 24

# List of login-namespaces which will have value automatically generated from users name.
perun.loginNamespace.generated=

# Program which sends sms from Perun
perun.sms.program = /home/perun/send_sms.sh

# Set true if perun DB connection should be read only (item is optional, default is false)
perun.readOnlyPerun=false

# Set true if Perun should update DB version when new version of code is present (item is optional, defualt is false).
perun.DBInitializatorEnabled=false

# Perun instance name
perun.instanceName = {{ instance_name }}

# Perun instance
perun.instanceId = {{ instance_id }}

# set which user ext sources are non removable. Ext sources are divided by ';' if only extsource name is present all user extsources are non removable.
# If ',' character is present, everything after is considered as regex and applied to user login in ext. source (such logins/dentities are then non removable).
# Example:   ExtSourceName1;ExtSourceName2,regex2;ExtSourceName3
perun.userExtSources.persistent=PERUN;

# Comma separated list of entityIDs of proxy IdPs which is infront of Perun. So Perun can work with them differently.
perun.proxyIdPs= {{ proxy_idps }}

# Comma separated names of allowed CORS domains
#perun.allowedCorsDomains=

# IdP/Cert Attributes to update in PERUN
# (override default settings, comma separated list of attribute names - passed to Tomcat)
# perun.attributesForUpdate.idp=
# perun.attributesForUpdate.x509=
#

# Shared SMTP configuration, following values are default, uncomment to change them.
#mail.smtp.host=localhost
#mail.smtp.port=25
#mail.smtp.auth=false
#mail.smtp.starttls.enable=false
#mail.debug=false
#perun.smtp.user=
#perun.smtp.pass=

# For which login-namespaces will perun auto-create necessary attributes (comma separated list)
perun.autocreatedNamespaces=

# Default JDBC query timeout for each preparedStatement (in seconds). Set to -1 for unlimited.
# perun.queryTimeout=-1
