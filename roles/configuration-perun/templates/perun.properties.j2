# Perun administrators
perun.admins = perunController, perunDispatcher, perunRegistrar, perunCabinet, perunLdapc, perun

# Principals for the Engines (user 'perun' for this example setup)
perun.engine.principals = perunEngine, perun-engine

# Principals for the Registrar
perun.registrar.principals = 

# Principals for the Notificator 
perun.notification.principals = perunNotifications

# Principal for the RPC
perun.rpc.principal = perunRpc

# DB type (use 'oracle' or 'postgresql' respectively
perun.db.type = postgresql

# Default group synchronization interval in fold of 5 minutes
perun.group.synchronization.interval = 1

# Timeout for group synchronization in minutes
perun.group.synchronization.timeout = 10

# Users who can do delegation (used for custom external components acting as logged users)
perun.rpc.powerusers = 

# Perun DB Name (by default it's 'perun')
perun.perun.db.name = "{{ db_name }}"

# Perun RT URL
perun.rt.url = [RT-url]

# Default queue in RT
perun.rt.defaultQueue=perun

# Perun service user for RT tickets
perun.rt.serviceuser.username = [RT-user]

# Perun service user for RT tickets
perun.rt.serviceuser.password = [RT-user-password]

# Program which ensures password changes in case Perun manages some namespace (LDAP, Kerberos server)
perun.passwordManager.program = /usr/local/bin/perun.passwordManager

# Program which ensures alternative passwords changes
perun.alternativePasswordManager.program = /usr/local/bin/perun.altPasswordManager

# Peruns reCaptcha private key
perun.recaptcha.privatekey = [reCaptcha-private-key]

# Perun properties for email validation message
perun.mailchange.secretKey = [secret-key]
perun.mailchange.backupFrom = [backup-email]
perun.mailchange.validationWindow = 6

# Perun properties for non-authz password reset (min. 16 chars/bytes for AES 128)
perun.pwdreset.secretKey = [secret-key]
perun.pwdreset.initVector = [init-vector]
perun.pwdreset.validationWindow = 6

# Set native language properties
perun.native.language = cs,ÄŒesky,Czech

# List of login-namespaces which will have value automatically generated from users name.
perun.loginNamespace.generated=

# Program which sends sms from Perun
perun.sms.program = /home/perun/send_sms.sh

# Set true if perun DB connection should be read only (item is optional, default is false)
perun.readOnlyPerun=false

# Set true if Perun should update DB version when new version of code is present (item is optional, defualt is false). 
perun.DBInitializatorEnabled=false

# Define perun instance name used in a subject of some mail notifications. If not set/present "Perun" is used.
perun.instanceName = Perun

# List of ext sources which can't be removed from user if present, splitted by ";", value can be "ext source name" or "name,regex" where regex is applied to users login in ext source
perun.userExtSources.persistent=PERUN