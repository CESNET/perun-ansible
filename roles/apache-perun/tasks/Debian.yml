# Tasks file for apache-perun

- name: Gather package facts
  package_facts:
    manager: "apt"

- name: Check that Shibboleth is installed
  assert:
    that:
     - '"shibboleth" in ansible_facts.packages'
    msg: "Shibboleth is required in Apache config files"


- name: Install Apache
  package:
    name: "{{ apache_package[ansible_os_family] }}"
    state: present

- name: Enable Apache modules
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items: "{{ apache_modules[ansible_os_family] }}"
  notify:
    - "restart webserver"

# ssl-cert group is created by ssl-cert package, which is dependency of apache2
# ssl-cert group is used by packages like postgres and openldap which need access to private keys
# perun user needs access to site key for authentication when uploading to URLs
- name: Add user {{ perun_login }} to group ssl-cert
  user:
    name: "{{ perun_login }}"
    groups: ssl-cert
    append: yes

- name: Make "{{ perun_ssl_dir }}" directory
  file:
    path: "{{ perun_ssl_dir }}"
    state: directory
    mode: 0755

# Fake Snake Oil if ssl_certificate_file variable is not filled
- name: Make fake Snake Oil certificate for testing purposes
  command: make-ssl-cert generate-default-snakeoil
  args:
    creates: /etc/perun/ssl/ssl-cert-snakeoil.pem
  when: apache_certificate_file == "/etc/perun/ssl/ssl-cert-snakeoil.pem"

- name: Copy Snake Oil certificate to /etc/perun/ssl folder
  command: cp /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/ssl/private/ssl-cert-snakeoil.key /etc/perun/ssl/
  args:
    creates: /etc/perun/ssl/ssl-cert-snakeoil.pem
  when: apache_certificate_file == "/etc/perun/ssl/ssl-cert-snakeoil.pem"

- name: Check rights on certificate
  file:
    path: "{{ apache_certificate_file }}"
    follow: yes
    owner: root
    group: root
    mode: 0644

- name: Check rights on certificate key
  file:
    path: "{{ apache_certificate_key_file }}"
    follow: yes
    owner: root
    group: ssl-cert
    mode: 0640

- name: Remove default Apache site
  file:
    path: "/etc/apache2/sites-enabled/{{ item }}"
    state: absent
  with_items:
    - 000-default.conf
    - default-ssl.conf
  notify:
    - "restart webserver"

- name: Create Apache configuration files in /etc/apache2/sites-available/
  template:
    src: "{{ item }}.j2"
    dest: "/etc/apache2/sites-available/{{ item }}"
    force: no
    mode: 0644
  with_items:
    - perun.conf
    - perun-ssl.conf

- name: Enable Perun sites in Apache
  command:  a2ensite "{{ item }}"
  args:
    creates: "/etc/apache2/sites-enabled/{{ item }}"
  with_items:
    - perun.conf
    - perun-ssl.conf
  notify:
    - "restart webserver"

- name: Install prerequisite for htpasswd task
  package:
    name: python-passlib
    state: present

- name: Add user perun into Apache
  htpasswd:
    path: "/etc/apache2/perun.passwd"
    name: "perun"
    password: "{{ password_perun_admin }}"
    owner: root
    group: root
    mode: 0644

- name: Add user perun-engine into Apache
  htpasswd:
    path: "/etc/apache2/perun.passwd"
    name: "perun-engine"
    password: "{{ password_perun_engine }}"
    owner: root
    group: root
    mode: 0644

- name: Create directory for maintenance files
  file:
    path: /var/www/maintenance
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0755

- name: Copy maintenance files
  template:
    src: "./maintenance/{{ item }}.j2"
    dest: "/var/www/maintenance/{{ item }}"
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0644
  with_items: "{{ maintenance_files }}"

- name: Add EGI IGTF repository key
  apt_key:
    id: 3CDBBC71
    url: "https://dist.eugridpma.info/distribution/igtf/current/GPG-KEY-EUGridPMA-RPM-3"
    state: present
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Add EGI IGTF repository
  apt_repository:
    repo: 'deb http://repository.egi.eu/sw/production/cas/1/current egi-igtf core'
    filename: 'igtf'
    state: present
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Install latest IGTF certificates
  apt:
    name: ca-policy-egi-core
    state: latest
    update_cache: yes
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"
  notify:
    - "restart webserver"

- name: Install fetch-crl
  apt:
    name: fetch-crl
    state: latest
    update_cache: yes
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Disable error emails from fetch-crl
  lineinfile:
    dest: /etc/fetch-crl.conf
    insertafter: EOF
    line: "noerrors"
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

# Rehash certificates for user identification
- name: Use c_rehash to your certificates
  command: c_rehash .
  args:
    chdir: "{{ apache_ca_certificate_path }}"
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path != "/etc/grid-security/certificates/"
  notify:
    - "restart webserver"

- name: Enable JSON data comprimation in Apache
  lineinfile:
    dest: /etc/apache2/mods-available/deflate.conf
    insertafter: "<IfModule mod_filter.c>\n"
    line: "\t\t# Perun\n\t\tAddOutputFilterByType DEFLATE text/javascript"
    regexp: "\t\t# Perun\n\t\tAddOutputFilterByType DEFLATE text/javascript"
    backrefs: yes
  notify:
    - "restart webserver"

