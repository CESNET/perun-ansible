# Tasks file for apache-perun

- name: Gather package facts
  package_facts:
    manager: "apt"

- name: Check that Shibboleth is installed
  assert:
    that:
     - '"shibboleth" in ansible_facts.packages or "libapache2-mod-shib" in ansible_facts.packages'
    msg: "Shibboleth is required in Apache config files"


- name: Install Apache
  package:
    name: "{{ apache_package[ansible_os_family] }}"
    state: present

- name: Install Unzip
  package:
    name: "unzip"
    state: present

- name: Enable Apache modules
  apache2_module:
    name: "{{ item }}"
    state: present
  with_items: "{{ apache_modules[ansible_os_family] }}"
  notify:
    - "restart webserver"


- name: Remove default Apache site
  file:
    path: "/etc/apache2/sites-enabled/{{ item }}"
    state: absent
  with_items:
    - 000-default.conf
    - default-ssl.conf
  notify:
    - "restart webserver"

- name: Create Apache configuration files in /etc/apache2/sites-available/
  template:
    src: "{{ item }}.j2"
    dest: "/etc/apache2/sites-available/{{ item }}"
    force: no
    mode: 0644
  with_items:
    - perun.conf
    - perun-ssl.conf

- name: Enable Perun sites in Apache
  command:  a2ensite "{{ item }}"
  args:
    creates: "/etc/apache2/sites-enabled/{{ item }}"
  with_items:
    - perun.conf
    - perun-ssl.conf
  notify:
    - "restart webserver"

- name: Install prerequisite for htpasswd task
  package:
    name: python-passlib
    state: present

- name: Add user perun into Apache
  htpasswd:
    path: "/etc/apache2/perun.passwd"
    name: "perun"
    password: "{{ password_perun_admin }}"
    owner: root
    group: root
    mode: 0644

- name: Add user perun-engine into Apache
  htpasswd:
    path: "/etc/apache2/perun.passwd"
    name: "perun-engine"
    password: "{{ password_perun_engine }}"
    owner: root
    group: root
    mode: 0644

- name: Create directory for maintenance files
  file:
    path: /var/www/maintenance
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0755

- name: Copy maintenance files
  template:
    src: "./maintenance/{{ item }}.j2"
    dest: "/var/www/maintenance/{{ item }}"
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0644
  with_items: "{{ maintenance_files }}"

- name: Create directory for static files
  file:
    path: /var/www/static
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0755

- name: Download Bootstrap 3.4.1
  get_url:
    url: "https://github.com/twbs/bootstrap/releases/download/v3.4.1/bootstrap-3.4.1-dist.zip"
    dest: "/home/perun/"
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"
    mode: 0644

- name: Unpack and deploy Bootstrap static files
  unarchive:
    src: "/home/perun/bootstrap-3.4.1-dist.zip"
    dest: "/var/www/static/"
    remote_src: "yes"

- name: Add EGI IGTF repository key
  apt_key:
    id: 3CDBBC71
    url: "https://dist.eugridpma.info/distribution/igtf/current/GPG-KEY-EUGridPMA-RPM-3"
    state: present
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Add EGI IGTF repository
  apt_repository:
    repo: 'deb http://repository.egi.eu/sw/production/cas/1/current egi-igtf core'
    filename: 'igtf'
    state: present
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Install latest IGTF certificates
  apt:
    name: ca-policy-egi-core
    state: latest
    update_cache: yes
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"
  notify:
    - "restart webserver"

- name: Install fetch-crl
  apt:
    name: fetch-crl
    state: latest
    update_cache: yes
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

- name: Disable error emails from fetch-crl
  lineinfile:
    dest: /etc/fetch-crl.conf
    insertafter: EOF
    line: "noerrors"
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path == "/etc/grid-security/certificates/"

# Rehash certificates for user identification
- name: Use c_rehash to your certificates
  command: c_rehash .
  args:
    chdir: "{{ apache_ca_certificate_path }}"
  when: apache_ca_certificate_path is defined and apache_ca_certificate_path != "/etc/grid-security/certificates/"
  notify:
    - "restart webserver"

- name: Enable JSON data comprimation in Apache
  lineinfile:
    dest: /etc/apache2/mods-available/deflate.conf
    insertafter: "<IfModule mod_filter.c>\n"
    line: "\t\t# Perun\n\t\tAddOutputFilterByType DEFLATE text/javascript"
    regexp: "\t\t# Perun\n\t\tAddOutputFilterByType DEFLATE text/javascript"
    backrefs: yes
  notify:
    - "restart webserver"

- name: Use cronolog for error log rotation
  lineinfile:
    path: "/etc/apache2/apache2.conf"
    regexp: 'ErrorLog \${APACHE_LOG_DIR}/error.log'
    line: 'ErrorLog "|/usr/bin/cronolog /var/log/apache2/%Y/%m/%d/error.log"'
    backrefs: yes
  notify:
    - "restart webserver"

- name: Use cronolog for access log rotation
  lineinfile:
    path: "/etc/apache2/conf-enabled/other-vhosts-access-log.conf"
    regexp: 'CustomLog \${APACHE_LOG_DIR}/other_vhosts_access.log vhost_combined'
    line: 'CustomLog "|/usr/bin/cronolog /var/log/apache2/%Y/%m/%d/access.log" vhost_combined'
    backrefs: yes
  notify:
    - "restart webserver"

- name: Set ServerTokens level to Production
  lineinfile:
    path: "/etc/apache2/conf-enabled/security.conf"
    regexp: 'ServerTokens OS'
    line: 'ServerTokens Prod'
    backrefs: yes
  notify:
    - "restart webserver"

- name: Comment out default SSLCipherSuite
  lineinfile:
    path: "/etc/apache2/mods-enabled/ssl.conf"
    regexp: 'SSLCipherSuite HIGH:!aNULL'
    line: ' #SSLCipherSuite HIGH:!aNULL'
  notify:
    - "restart webserver"

- name: Comment out default SSLProtocol
  lineinfile:
    path: "/etc/apache2/mods-enabled/ssl.conf"
    regexp: 'SSLProtocol all -SSLv3'
    line: ' #SSLProtocol all -SSLv3'
  notify:
    - "restart webserver"

- name: Set up TLS correctly
  blockinfile:
    dest: "/etc/apache2/mods-enabled/ssl.conf"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertbefore: '</IfModule>'
    block: |
      # see https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=apache-2.4.37&openssl=1.1.1a&hsts=yes&profile=modern
      SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
      SSLCipherSuite          ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
      SSLHonorCipherOrder     on
      SSLCompression          off
      SSLSessionTickets       off

      # OCSP Stapling, only in httpd 2.3.3 and later
      SSLUseStapling          on
      SSLStaplingResponderTimeout 5
      SSLStaplingReturnResponderErrors off
      SSLStaplingCache        shmcb:/var/run/ocsp(128000)

- name: Create HTTP2 module config
  copy:
    dest: "/etc/apache2/mods-available/http2.conf"
    force: no
    content: |
      Protocols h2 http/1.1

- name: Enable HTTP2 module
  apache2_module:
    name: http2
    state: present
  notify:
    - "restart webserver"
