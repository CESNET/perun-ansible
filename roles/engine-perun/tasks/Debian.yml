---
# Task file for Debian distribution

- name: Delete /opt/perun-cli directory if exists
  file:
    path: "/opt/perun-cli"
    state: absent

- name: Create /opt/perun-cli directory
  file:
    path: "/opt/perun-cli"
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"

- name: Create /opt/perun-cli/lib directory
  file:
    path: "/opt/perun-cli/lib"
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"

- name: Copy CLI scripts to /opt/perun-cli/lib/ directory
  become: yes
  become_user: "{{ perun_login }}"
  command: cp -r Perun /opt/perun-cli/lib/
  args:
    chdir: "{{ perun_folder }}/perun-cli"

- name: Create /opt/perun-cli/bin directory
  file:
    path: "/opt/perun-cli/bin"
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"

- name: Copy CLI scripts to /opt/perun-cli/bin/ directory
  become: yes
  become_user: "{{ perun_login }}"
  shell: "rsync --exclude Perun ./* /opt/perun-cli/bin/"
  args:
    chdir: "{{ perun_folder }}/perun-cli"

- name: Add user perun into Apache
  shell: "htpasswd -b -c /etc/apache2/perun.passwd perun {{ password_perun_admin }}"
- name: Add user perun-engine into Apache
  shell: "htpasswd -b /etc/apache2/perun.passwd perun-engine {{ password_perun_engine }}"

- name: Restart Apache
  service:
    state: restarted
    name: apache2

- name: "Delete /home/{{ perun_login }}/perun-engine directory if exists"
  file:
    path: "/home/{{ perun_login }}/perun-engine"
    state: absent

- name: Create /home/{{ perun_login }}/perun-engine directory
  become: yes
  become_user: "{{ perun_login }}"
  file:
    path: "/home/{{ perun_login }}/perun-engine"
    state: directory

# the executable jar for perun-engine was already build in the build-perun role
- name: "Copy perun-engine.jar to /home/{{ perun_login }}/perun-engine/"
  become: yes
  become_user: "{{ perun_login }}"
  command: cp perun-engine.jar "/home/{{ perun_login }}/perun-engine/"
  args:
    chdir: "{{ perun_folder }}/perun-engine/target/"

- name: "Copy GEN scripts of engine to /home/{{ perun_login }}/perun-engine/"
  become: yes
  become_user: "{{ perun_login }}"
  command: cp -r gen "/home/{{ perun_login }}/perun-engine/"
  args:
    chdir: "{{ perun_services_folder }}"

- name: "Copy SEND scripts of engine to /home/{{ perun_login }}/perun-engine/"
  become: yes
  become_user: "{{ perun_login }}"
  command: cp -r send "/home/{{ perun_login }}/perun-engine/"
  args:
    chdir: "{{ perun_services_folder }}"

- name: Copy init.d script for perun-engine
  copy:
    src: "{{ init_d_script[ansible_os_family].source }}"
    dest: "{{ init_d_script[ansible_os_family].destination }}"
    owner: root
    group: root
    mode: "{{ init_d_script[ansible_os_family].mode }}"
    remote_src: yes

- name: "Delete /var/run/perun directory if exists"
  file:
    path: "/var/run/perun"
    state: absent

- name: Create /var/run/perun directory
  file:
    path: "/var/run/perun"
    state: directory
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"

- name: "Create /var/log/perun/perun-engine-out.log file"
  file:
    path: "/var/log/perun/perun-engine-out.log"
    state: touch
    owner: "{{ perun_login }}"
    group: "{{ perun_group }}"

- name: Start perun-engine and enable it to start after reboot
  service:
    name: perun-engine
    state: started
    enabled: yes
