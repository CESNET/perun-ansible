---
# Task file for postgre database installation in Debian distribution

- name: Install postgresql package
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{postgre_packages[ansible_os_family]}}"

- name: Install python-psycopg2 package
  become: true
  package:
    name: "{{ python_psycopg2_package[ansible_os_family] }}"
    state: latest

- name: Change password of postgres super-user
  become: yes
  become_user: postgres
  postgresql_user:
    name: postgres
    password: "{{ password_postgre }}"
    state: present
  notify: Ensure the PostgreSQL service is running

- meta: flush_handlers

- name: Ensure database "{{ db_name }}" is created
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    encoding: 'UTF-8'
    template: 'template0'
    state: present

- name: Ensure user has access to the database
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ password_db }}"
    priv: ALL
    state: present

- name: Ensure user "{{ db_user }}" does not have unnecessary privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present

- name: Drop schema perun if exists
  become: yes
  become_user: postgres
  command: psql -d "{{ db_name }}" -c "DROP SCHEMA IF EXISTS perun CASCADE;"

- name: Creating of schema perun
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -c "CREATE SCHEMA perun authorization {{ db_user }};"

# Setting access to database for user perun
# -----------------------------------------

- name: "Add rows to /etc/postgresql/{{ postgre_version }}/main/pg_hba.conf"
  become: yes
  become_user: postgres
  blockinfile:
    dest: "/etc/postgresql/{{ postgre_version }}/main/pg_hba.conf"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: '# Database administrative login by Unix domain socket'
    block: |
        local perun perun ident
        host perun perun 127.0.0.1/32 md5

- name: Restart PostgreSQL
  become: true
  service:
    state: reloaded
    name: postgresql

- name: Make user "{{ db_user }}" temporary superuser
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: SUPERUSER
    state: present

- name: Add extension to schema perun by user perun
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -c "CREATE EXTENSION unaccent SCHEMA perun;"

- name: Remove user "{{ db_user }}" superuser privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: NOSUPERUSER
    state: present

- name: Create empty table schema
  become: yes
  become_user: "{{ db_user }}"
  command: psql -d "{{ db_name }}" -f "{{ postgres_conf_file_path }}"

- name: Create initial user in database
  become: yes
  become_user: "{{ db_user }}"
  command: psql -c "insert into perun.ext_sources (id,name,type) values (nextval('ext_sources_id_seq'),'INTERNAL','cz.metacentrum.perun.core.impl.ExtSourceInternal');insert into perun.users (id, first_name, last_name) values (nextval('users_id_seq'),'{{ init_user_first_name }}','{{ init_user_last_name }}');insert into perun.user_ext_sources (id, user_id, login_ext, ext_sources_id, loa) values (nextval('user_ext_sources_id_seq'), currval('users_id_seq'), 'perun', currval('ext_sources_id_seq'), 0);"
